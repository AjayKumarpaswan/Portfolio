{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TypingAnimation(props) {\n  _s();\n  const [text, setText] = useState('');\n  const messages = [props.text];\n  const typingSpeed = 100; // Speed in milliseconds between each character\n\n  useEffect(() => {\n    let currentIndex = 0;\n    let currentMessageIndex = 0;\n    const intervalId = setInterval(() => {\n      if (currentIndex <= messages[currentMessageIndex].length) {\n        setText(messages[currentMessageIndex].slice(0, currentIndex));\n        currentIndex++;\n      } else {\n        setTimeout(() => {\n          currentIndex = 0;\n          currentMessageIndex = (currentMessageIndex + 1) % messages.length;\n        }, 1000); // Wait for 1 second before clearing text and moving to the next message\n      }\n    }, typingSpeed);\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: text\n  }, void 0, false);\n}\n_s(TypingAnimation, \"4ujWDM02ns4tez/JXYjL1bw6ipA=\");\n_c = TypingAnimation;\nexport default TypingAnimation;\nvar _c;\n$RefreshReg$(_c, \"TypingAnimation\");","map":{"version":3,"names":["React","useState","useEffect","Fragment","_Fragment","jsxDEV","_jsxDEV","TypingAnimation","props","_s","text","setText","messages","typingSpeed","currentIndex","currentMessageIndex","intervalId","setInterval","length","slice","setTimeout","clearInterval","children","_c","$RefreshReg$"],"sources":["E:/ReactProjects/portfolio/my-project/src/Text.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction TypingAnimation(props) {\r\n  const [text, setText] = useState('');\r\n  const messages = [props.text];\r\n  const typingSpeed = 100; // Speed in milliseconds between each character\r\n\r\n  useEffect(() => {\r\n    let currentIndex = 0;\r\n    let currentMessageIndex = 0;\r\n\r\n    const intervalId = setInterval(() => {\r\n      if (currentIndex <= messages[currentMessageIndex].length) {\r\n        setText(messages[currentMessageIndex].slice(0, currentIndex));\r\n        currentIndex++;\r\n      } else {\r\n        setTimeout(() => {\r\n          currentIndex = 0;\r\n          currentMessageIndex = (currentMessageIndex + 1) % messages.length;\r\n        }, 1000); // Wait for 1 second before clearing text and moving to the next message\r\n      }\r\n    }, typingSpeed);\r\n\r\n    return () => clearInterval(intervalId);\r\n  }, []);\r\n\r\n  return (\r\n      <>{text}</>\r\n  );\r\n}\r\n\r\nexport default TypingAnimation;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,eAAeA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMW,QAAQ,GAAG,CAACJ,KAAK,CAACE,IAAI,CAAC;EAC7B,MAAMG,WAAW,GAAG,GAAG,CAAC,CAAC;;EAEzBX,SAAS,CAAC,MAAM;IACd,IAAIY,YAAY,GAAG,CAAC;IACpB,IAAIC,mBAAmB,GAAG,CAAC;IAE3B,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;MACnC,IAAIH,YAAY,IAAIF,QAAQ,CAACG,mBAAmB,CAAC,CAACG,MAAM,EAAE;QACxDP,OAAO,CAACC,QAAQ,CAACG,mBAAmB,CAAC,CAACI,KAAK,CAAC,CAAC,EAAEL,YAAY,CAAC,CAAC;QAC7DA,YAAY,EAAE;MAChB,CAAC,MAAM;QACLM,UAAU,CAAC,MAAM;UACfN,YAAY,GAAG,CAAC;UAChBC,mBAAmB,GAAG,CAACA,mBAAmB,GAAG,CAAC,IAAIH,QAAQ,CAACM,MAAM;QACnE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACZ;IACF,CAAC,EAAEL,WAAW,CAAC;IAEf,OAAO,MAAMQ,aAAa,CAACL,UAAU,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIV,OAAA,CAAAF,SAAA;IAAAkB,QAAA,EAAGZ;EAAI,gBAAG,CAAC;AAEjB;AAACD,EAAA,CA3BQF,eAAe;AAAAgB,EAAA,GAAfhB,eAAe;AA6BxB,eAAeA,eAAe;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}